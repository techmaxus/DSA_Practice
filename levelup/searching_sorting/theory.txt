Merge Sort
    nlogn
    is a divide and conquer algorithm
    recursion works in a dfs manner
    1. Divide
    2. Mergesort(left) and mergesort(right)
    3. Merge left and right part in the single array

Inversion Count
    nlogn
    inversion: two element a[i] and a[j] form an inversion if a[i]>a[j] and i<j
    sample input {0,5,2,3,1}
    sample output 5
        {5,2} {5,3} {5,1} {2,1} {3,1}
    
    intuition
        how many inversion will each element will form
        Apply d&c
        {0,5,2},{3,1}
        total = c1 + c2 + cross inversion
        cross inversion use merge Sort
        whenever we take element from right array we add m-i+1 to inversion Count

Quick Sort
    Divide and conquer
    best O(nlogn)
    worst O(n^2)
    1. Choose a pivot (last element in our case)
    2. Partition the array in a way so that all element less than the pivot element 
    are on the left and greater on right hence pivot element is on correct position
    3. Reccursively sort left and right

    Partition 
    choose the last element as pivot element 
    from s to e check if element is less than pivot swap i and j so that
    small element are placed at left side

Quick Select
    Find kth smallest element in array
    both call of the quick sort are not needed

Smallest string
    Concatenate string such that it produce lexically smallest string
    use sorting algorithm with custom comparator

Sparse Search
    many elements of array are blank and others are sorted
    applying the binary search algorithm
    
