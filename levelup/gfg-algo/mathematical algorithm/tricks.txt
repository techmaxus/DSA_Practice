1. Efficient Method to Check if a Number is Multiple of 3
    -- If difference between count of odd set bits (Bits set at odd positions) and even set bits is multiple of 3 then is the number.
    --  int isMultipleOf3(int n){
        int odd_count = 0;
        int even_count = 0;
            if(n<0) n=-n;
            if(n==0) return 1;
            if(n==1) return 0;
        while(n){
            if(n & 1) oddCount++;
            if(n & 2) evenCount++;
            n =n >> 2;
        }
        return isMultipleOf3(abs(odd_count - even_count));
        }
2. Efficient way to multiply with 7
    -- First left shift the number by 3 bits (you will get 8n) then subtract the original numberfrom the shifted number and return the difference (8n – n). 
    -- long multiplybyseven(long n){
         return ((n<<3)-n);
       }
3. Write a program to print all permutations of a given string 
    -- void permute(string a, int l, int r){
        if (l == r)  cout<<a<<endl;
        else{
            for (int i = l; i <= r; i++){
                swap(a[l], a[i]);
                permute(a, l+1, r);
                swap(a[l], a[i]); }
            }
        }
4. Lucky Numbers
    --  bool isLucky(int n){
        static int counter = 2;
        if(n < counter) return 1;
        if(n % counter ==0) return 0;
        int next_position = n -(n/counter);
        counter++;
        return isLucky(next_position);
        }
5. Write a program to add two numbers in base 14
    -- simply mark two digit letter a single alphabet and add nubers digit by digit
6. Babylonian method for square root
    -- float squareroot(float n){
        float x = n;
        float y = 1;
        float approx = 0.0000001;
        while(x-y>approx){
            x = ( x + y ) / 2;
            y = n / x;
        }
        return x;
        }
7. Multiply two integers without using multiplication, division and bitwise operators, and no loops
    -- reccursion
        int multiply(int x, int y){
            if(y == 0)    return 0;
            if(y > 0 )    return (x + multiply(x, y-1));
            if(y < 0 )    return -multiply(x, -y);
        }
    -- russian Peasant
        int russianPeasant(int a,int b){
            int res = 0;    
                while (b > 0){
                    if (b & 1)      res = res + a;
                    a = a << 1;
                    b = b >> 1;
                }
            return res;
        }
8. Print all combinations of points that can compose a given number
    -- for (int k = 1; k <= MAX_POINT; k++)
        {
            arr[i]= k;
            printCompositions(n-k, i+1);
        }
9. Write you own Power without using multiplication(*) and division(/) operators
    -- loops or recuursiom
    -- simply use multiplication of a and b as addition of a ,b number of times
10. Program for Fibonacci numbers
    -- basic reccursion
    -- dp improvised in O(n) time and O(n) space
    -- O(1) space and O(n) time by using only 2 variable like 2 past variable
    -- Using matrix multiplication 
        --  1 1  ^  N     =   F(n+1)  F(n)
            1 0               F(n)    F(n-1)
        --  int fib(int n){
                int F[2][2] = { { 1, 1 }, { 1, 0 } };
                if (n == 0)     return 0;
                power(F, n - 1);
                return F[0][0];
            }
            void multiply(int F[2][2], int M[2][2]){
                int x = F[0][0] * M[0][0] + F[0][1] * M[1][0];
                int y = F[0][0] * M[0][1] + F[0][1] * M[1][1];
                int z = F[1][0] * M[0][0] + F[1][1] * M[1][0];
                int w = F[1][0] * M[0][1] + F[1][1] * M[1][1];
                F[0][0] = x;
                F[0][1] = y;
                F[1][0] = z;
                F[1][1] = w;
            }
            void power(int F[2][2], int n){
                int i;
                int M[2][2] = { { 1, 1 }, { 1, 0 } }; 
                for(i = 2; i <= n; i++)
                        multiply(F, M);
            }
    -- space optimization in matrix multiplication
        --  int fib(int n){
                int F[2][2] = {{1, 1}, {1, 0}};
                if (n == 0) return 0;
                power(F, n - 1);
                return F[0][0];
            }
            void power(int F[2][2], int n){
                if(n == 0 || n == 1)    return;
                int M[2][2] = {{1, 1}, {1, 0}};
                power(F, n / 2);
                multiply(F, F);
                if (n % 2 != 0)  multiply(F, M);
            }
            void multiply(int F[2][2], int M[2][2]){
                int x = F[0][0] * M[0][0] + F[0][1] * M[1][0];
                int y = F[0][0] * M[0][1] + F[0][1] * M[1][1];
                int z = F[1][0] * M[0][0] + F[1][1] * M[1][0];
                int w = F[1][0] * M[0][1] + F[1][1] * M[1][1];
                F[0][0] = x;
                F[0][1] = y;
                F[1][0] = z;
                F[1][1] = w;
            }
    -- O(logn) recureence relation
        --  int f[MAX] = {0};
            int fib(int n){
                if (n == 0)   return 0;
                if (n == 1 || n == 2)  return (f[n] = 1);
                if (f[n])    return f[n];
                int k = (n & 1)? (n+1)/2 : n/2;
                f[n] = (n & 1)? (fib(k)*fib(k) + fib(k-1)*fib(k-1)): (2*fib(k-1) + fib(k))*fib(k);
                return f[n];
            }
    -- O(1) trick using binets formulae
        -- theory
            f(n)=f(n-1)+f(n-2)      f(1)=f(2)=1;
            try f(n) = x^n 
            x^n = x^(n-1) + x^(n-2)
            x^2 = x + 1
            x^2 - x - 1 = 0 
            x = (-b +- root(b^2-4ac)) /2 
            F(n) = ((1+sqrt(5))^n - (1-sqrt(5))^n)/2^n * sqrt(5)
        -- implementation
            int fib(int N) {
            double phi = (sqrt(5) + 1) / 2;     
            return round(pow(phi, N) / sqrt(5));
    }
12. Count numbers that don’t contain 3
        --  int count(int n){
                if (n < 3) return n;
                if (n >= 3 && n < 10) return n-1;
                int po = 1;
                while (n/po > 9)    po = po*10;
                int msd = n/po;
                if (msd != 3)  return count(msd)*count(po - 1) + count(msd) + count(n%po);
                else    return count(msd*po - 1);
            }
13. MagicSquare
        
14. Sieve of Eratosthenes

15. Number which has the maximum number of distinct prime factors in the range M to N
16. Find day of the week for a given date
17. DFA based division

    
Generate integer from 1 to 7 with equal probability
Given a number, find the next smallest palindrome
Make a fair coin from a biased coin
Check divisibility by 7
Find the largest multiple of 3
Lexicographic rank of a string
Print all permutations in sorted (lexicographic) order
Shuffle a given array
Space and time efficient Binomial Coefficient
Reservoir Sampling
Pascal’s Triangle
Select a random number from stream, with O(1) space
Find the largest multiple of 2, 3 and 5
Efficient program to calculate e^x
Measure one litre using two vessels and infinite water supply
Efficient program to print all prime factors of a given number
Print all possible combinations of r elements in a given array of size n
Random number generator in arbitrary probability distribution fashion
How to check if a given number is Fibonacci number?
Russian Peasant Multiplication
Count all possible groups of size 2 or 3 that have sum as multiple of 3
Tower of Hanoi
Horner’s Method for Polynomial Evaluation
Count trailing zeroes in factorial of a number
Program for nth Catalan Number
Generate one of 3 numbers according to given probabilities
Find Excel column name from a given column number
Find next greater number with same set of digits
Count Possible Decodings of a given Digit Sequence
Calculate the angle between hour hand and minute hand
Count number of binary strings without consecutive 1?s
Find the smallest number whose digits multiply to a given number n
Draw a circle without floating point arithmetic
How to check if an instance of 8 puzzle is solvable?
Birthday Paradox
Multiply two polynomials
Count Distinct Non-Negative Integer Pairs (x, y) that Satisfy the Inequality x*x + y*y < n
Count ways to reach the n’th stair
Replace all ‘0’ with ‘5’ in an input Integer
Program to add two polynomials
Print first k digits of 1/n where n is a positive integer
Given a number as a string, find the number of contiguous subsequences which recursively add up to 9
Program for Bisection Method
Program for Method Of False Position
Program for Newton Raphson Method